extends ../_layout/_docs-layout.pug

block variables
  - var slug = 'nav'
  - var parent = 'components'
  - var title = 'Nav - Components - ridestyler.ui CSS Framework'
  - var description = 'ridestyler.ui CSS Framework is a lightweight, responsive and modern CSS framework for faster and extensible development. ridestyler.ui provides basic styles for typography and elements, flexbox based responsive layout system, pure CSS components and utilities with best practice coding and consistent design language.'

block docs-content
  +docs-heading('nav', 'Nav')

    .docs-demo.columns
      .column.col-6.col-xs-12
        ul.nav
          li.nav-item
            a(href="#nav") Elements
          li.nav-item.active
            a(href="#nav") Layout
            ul.nav
              li.nav-item
                a(href="#nav") Flexbox grid
              li.nav-item
                a(href="#nav") Responsive
              li.nav-item
                a(href="#nav") Navbar
              li.nav-item
                a(href="#nav") Empty states
          li.nav-item
            a(href="#nav") Components
          li.nav-item
            a(href="#nav") Utilities

    p
      | Add a container element with the #[code nav] class.
      | And add child elements with the #[code nav-item] class.
      | The #[code nav-item] with the #[code active] class will be highlighted.

    pre.code(data-lang='HTML')
      code
        :highlight(lang="html")
          <ul class="nav">
            <li class="nav-item">
              <a href="#">Elements</a>
            </li>
            <li class="nav-item active">
              <a href="#">Layout</a>
              <ul class="nav">
                <li class="nav-item">
                  <a href="#">Flexbox grid</a>
                </li>
                <li class="nav-item">
                  <a href="#">Responsive</a>
                </li>
                <li class="nav-item">
                  <a href="#">Navbar</a>
                </li>
                <li class="nav-item">
                  <a href="#">Empty states</a>
                </li>
              </ul>
            </li>
            <li class="nav-item">
              <a href="#">Components</a>
            </li>
            <li class="nav-item">
              <a href="#">Utilities</a>
            </li>
          </ul>

    +docs-subheading('branded-nav-column', 'BrandedNavColumn')

    p
      | You can use the BrandedNavColumn component to quickly give your app a RideStyler branded navigation system.
      | Instead of wrapping your #[code nav-items] in a #[code nav], wrap them inside of the BrandedNavColumn element and add any available nav-items.
      | You can add inner-navigation systems as well, just add a template wrapper with the prop #[code v-slot:inner] and place your nav-items inside.
      | Lastly you can place items in the footer of your nav by placing them in a template wrapper with the prop #[code v-slot:footer].

    pre.code(data-lang='HTML')
      code
        :highlight(lang="html")
          <!-- BrandedNavColumn component example -->
          <branded-nav-column :currentRoute="window.location.href" :helpLinksEnabled="false" homeLink="/">
            <li class="nav-item">
              <a href="#">Elements</a>
            </li>
            <li class="nav-item active">
              <a href="#" id="nav-toggle">Layout</a>
              <ToggleNav toggleSelector="#nav-toggle">
                <li class="nav-item">
                  <a href="#">Flexbox grid</a>
                </li>
                <li class="nav-item">
                  <a href="#">Responsive</a>
                </li>
                <li class="nav-item">
                  <a href="#">Navbar</a>
                </li>
                <li class="nav-item">
                  <a href="#">Empty states</a>
                </li>
              </ToggleNav>
            </li>
            <template v-slot:inner>
              <li class="nav-item">
                <a href="#">Components</a>
              </li>
            </template>
            <template v-slot:footer>
              <li class="nav-item">
                <a href="#">Utilities</a>
              </li>
            </template>
          </branded-nav-column>

    h4 props

    ul
      li
        strong helpLinksEnabled
        |  - true or false depending on if you want help/support links available in your nav
      li 
        strong currentRoute
        |  - the current path at which your browser is located. This will trigger the nav to close on mobile screens when updated
      li
        strong homeLink
        |  - the path of your home page. This will be used when clicking the logo at the top of the nav


    +docs-subheading('togglenav', 'ToggleNav')

    p
      | You can use the ToggleNav component to quickly hide and show inner nav-items.
      | instead of wrapping your #[code nav-items] in a #[code nav], wrap them in a ToggleNav element and add any available nav-items.
      | Lastly, add a selector to your toggle switch element and add the selector to your ToggleNav element as a #[code toggleSelector] prop to initiate your toggle switch.

    pre.code(data-lang='HTML')
      code
        :highlight(lang="html")
          <!-- ToggleNav component example -->
          <ul class="nav">
            <li class="nav-item">
              <a href="#">Elements</a>
            </li>
            <li class="nav-item active">
              <a href="#" id="nav-toggle">Layout</a>
              <toggle-nav toggleSelector="#nav-toggle">
                <li class="nav-item">
                  <a href="#">Flexbox grid</a>
                </li>
                <li class="nav-item">
                  <a href="#">Responsive</a>
                </li>
                <li class="nav-item">
                  <a href="#">Navbar</a>
                </li>
                <li class="nav-item">
                  <a href="#">Empty states</a>
                </li>
              </toggle-nav>
            </li>
            <li class="nav-item">
              <a href="#">Components</a>
            </li>
            <li class="nav-item">
              <a href="#">Utilities</a>
            </li>
          </ul>

    h4 props

    ul
      li
        strong toggleSelector
        |  - the id or class selector on the element you want used as the toggle switch.

    p
      | Checkout out the 
      a(href='../getting-started/javascript.html#rs-ui-components', target='_blank') Javascript 
      | page for more information on how to setup a custom component.

  include ../_layout/_footer.pug
  
block scripts
  script
      | new Vue({
      |   extends: rsui.components.ToggleNav,
      |   el: '#toggle-nav'
      | })