extends ../_layout/_docs-layout.pug

block variables
  - var slug = 'custom'
  - var parent = 'getting-started'
  - var title = 'Custom - Getting started - ridestyler.ui CSS Framework'
  - var description = 'ridestyler.ui CSS Framework is a lightweight, responsive and modern CSS framework for faster and extensible development. ridestyler.ui provides basic styles for typography and elements, flexbox based responsive layout system, pure CSS components and utilities with best practice coding and consistent design language.'

block docs-content
  +docs-heading('custom', 'Custom version')
    
    p
      | You can customize your version of ridestyler.ui by editing Sass files in 
      code /src
      |  directory or removing unneeded components from 
      code .scss
      |  source files.
    p
      a.btn.btn-primary(href='https://github.com/Burkson/ridestyler.ui/', target='_blank') Sass Source Code

    +docs-subheading('compiling', 'Compiling CSS')

    p
      | ridestyler.ui uses 
      a(href='http://gulpjs.com/', target='_blank') Gulp
      |  for compiling CSS. Firstly you need to 
      a(href='https://www.npmjs.com/get-npm', target='_blank') install NPM
      | , which is used to manage Gulp and other dependencies.
    p Then, you can build the CSS file from the command line:
    ol
      li Navigate to the root directory of ridestyler.ui.
      li
        | Run 
        code npm install
        | . NPM will install all dev dependencies as listed in package.json.
      li
        | When completed, run 
        code gulp build
        |  task to compile Sass to CSS and minify files.
      li
        | You can find compiled CSS files in 
        code /dist
        |  directory.
    p All available Gulp tasks:
    ul
      li
        code gulp build
        |  - compile both the CSS and documentation
      li
        code gulp scss
        |  - compile just the CSS
      li
        code gulp docs
        |  - compile just the documentation
      li
        code gulp fonts
        |  - compile the icon font
      li
        code gulp watch
        |  - watch file changes and re-compile CSS files and documentation as needed
      li
        code gulp serve
        |  - start a web-server hosting the documentation; watch for file changes and live-reload as needed.

    +docs-subheading('importing', 'Importing SCSS')
    p
      | It is recommended to customize ridestyler.ui by importing SCSS source files to your projects. In this way, you can keep ridestyler.ui up to date without conflicts, since ridestyler.ui code and your custom code are separate.
    ul
      li
        | First, create your own project and install ridestyler.ui via 
        a(href='./installation.html#install-npm') NPM or other package managers
        | .
      li Then inside your on SCSS file override variables as needed and import ridestyler.ui
      li Compile the SCSS file to CSS to get the custom version of ridestyler.ui.

    //- importing
    pre.code(data-lang='SCSS')
      code
        :highlight(lang="scss")
          // Define variables to override default ones
          $primary-color: #2e5bec;
          $dark-color: #3e396b;

          // Import full ridestyler.ui source code
          @import "~ridestyler.ui";

    +docs-subheading('folders', 'Folder structure')

    //- folder structure
    pre.code
      code
        :highlight
          ridestyler.ui/
          ├── dist/                           // Build folder
          │   ├── rs-ui
          │   └── rs-ui.min.css
          │
          ├── docs/
          │   ├── dist/                       // Pre-built CSS folder
          │   │   └── rs-ui.min.css
          |   ├── css/                        // Built docs CSS files
          │   │   └── docs.css
          |   ├── src/
          │   │   ├── scss                    // Docs Sass files
          │   │   │   └── docs.scss
          │   │   ├── index.pug               // Docs Pug files
          │   │   └── ...
          │   ├── ../
          │   ├── index.html
          │   └── ...
          │
          ├── src/                            // Source Sass files
          │   ├── index.scss
          │   ├── _mixins.scss
          │   ├── _variables.scss
          │   └── ...
          │
          ├── gulpfile.js
          ├── package.json
          └── ...

    +docs-subheading('variables', 'Variables')

    p
      | ridestyler.ui is designed with consistent design language. You can use your own variables to create your new or match existing design. All variables in 
      code _variables.scss
      |  include 
      code !default
      |  flag. You can redefine the variables to override the values.

    +docs-subheading('variables-colors', 'Variables - Colors')

    .columns
      .column.col-2.col-md-6
        .docs-color.bg-primary
          .color-title #{sass['$primary-color']}
          .color-subtitle $primary-color
      .column.col-2.col-md-6
        .docs-color.bg-secondary
          .color-title #{sass['$secondary-color']}
          .color-subtitle $secondary-color
    .columns
      .column.col-2.col-md-6
        .docs-color.bg-success
          .color-title #{sass['$success-color']}
          .color-subtitle $success-color
      .column.col-2.col-md-6
        .docs-color.bg-warning
          .color-title #{sass['$warning-color']}
          .color-subtitle $warning-color
      .column.col-2.col-md-6
        .docs-color.bg-error
          .color-title #{sass['$error-color']}
          .color-subtitle $error-color
    .columns
      .column.col-2.col-md-6
        .docs-color.bg-dark
          .color-title #{sass['$dark-color']}
          .color-subtitle $dark-color
      .column.col-2.col-md-6
        .docs-color.bg-gray
          .color-title #{sass['$gray-color']}
          .color-subtitle $gray-color
    .columns
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-orange
          .color-title #{sass['$ridestyler-color-orange']}
          .color-subtitle $ridestyler-color-orange
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-black
          .color-title #{sass['$ridestyler-color-black']}
          .color-subtitle $ridestyler-color-black
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-dark-gray
          .color-title #{sass['$ridestyler-color-dark-gray']}
          .color-subtitle $ridestyler-color-dark-gray
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-gray
          .color-title #{sass['$ridestyler-color-gray']}
          .color-subtitle $ridestyler-color-gray
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-red
          .color-title #{sass['$ridestyler-color-red']}
          .color-subtitle $ridestyler-color-red
      .column.col-2.col-md-6
        .docs-color.bg-ridestyler-blue
          .color-title #{sass['$ridestyler-color-blue']}
          .color-subtitle $ridestyler-color-blue

    +docs-subheading('variables-buttons', 'Variables - Button mixins')

    p
      | There is a button variant mixin in 
      code _mixins.scss
      |  to generate different color variants.
    ul
      li
        | @mixin button-variant(
        code $color
        | : $primary-color);

    //- button mixins
    pre.code(data-lang='Sass')
      code
        :highlight(lang="scss")
          <!-- filled button with the success color -->
          .btn-success {
            @include button-variant($success-color);
          }

    +docs-subheading('variables-sizes', 'Variables - Sizes')

    p
      | The default REM (root em) size in ridestyler.ui is 
      code #{sass['$html-font-size']}
      | .

  include ../_layout/_footer.pug